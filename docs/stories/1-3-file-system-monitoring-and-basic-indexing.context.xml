<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.3</storyId>
    <title>File System Monitoring and Basic Indexing</title>
    <status>drafted</status>
    <generatedAt>2025-10-31</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/1-3-file-system-monitoring-and-basic-indexing.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>developer working on an active codebase</asA>
    <iWant>Context to automatically detect and index file changes</iWant>
    <soThat>search results always reflect the current state of my project</soThat>
    <tasks>
      - Implement file system monitoring with Watchdog (AC: 1)
      - Implement basic file indexing for supported languages (AC: 2)
      - Implement incremental indexing system (AC: 3)
      - Add indexing status endpoints (AC: 4)
      - Implement metadata storage in PostgreSQL (AC: 5)
      - Write comprehensive tests for file monitoring and indexing (All ACs)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Watchdog-based file system monitoring detects changes in real-time</criterion>
    <criterion id="2">Basic file indexing processes Python, JavaScript, TypeScript, Java, C++ files</criterion>
    <criterion id="3">Incremental indexing updates only changed files without full reindex</criterion>
    <criterion id="4">Indexing status is visible through status endpoints</criterion>
    <criterion id="5">Basic metadata (file paths, modification times, file types) is stored correctly</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/architecture-Context-2025-10-31.md" section="Component 5: File System Monitor">
        <title>File System Monitor Component</title>
        <snippet>Real-time detection and processing of codebase changes. Technology: File system watchers, incremental indexing. Responsibilities: Real-time file system monitoring, change detection and classification, incremental indexing updates, background processing optimization. Key Features: Sub-second change detection, intelligent change classification.</snippet>
      </doc>
      <doc path="docs/architecture-Context-2025-10-31.md" section="Indexing Flow">
        <title>Indexing Flow Architecture</title>
        <snippet>1. Change Detection: File system monitor detects file changes, changes classified by type and importance, indexing queue updated with new files. 2. Code Analysis: Tree-sitter parsing generates ASTs, code structure analysis extracts relationships, pattern recognition identifies conventions.</snippet>
      </doc>
      <doc path="docs/architecture-Context-2025-10-31.md" section="Performance Targets">
        <title>Performance Requirements</title>
        <snippet>Indexing Throughput: 1000+ files/minute. Technology Stack: Watchdog for real-time change detection.</snippet>
      </doc>
      <doc path="docs/PRD.md" section="FR001: Real-time file system monitoring">
        <title>File System Monitoring Requirement</title>
        <snippet>Real-time file system monitoring with automatic change detection and incremental indexing. Required for keeping search results current with codebase changes.</snippet>
      </doc>
      <doc path="docs/epics.md" section="Story 1.3: File System Monitoring and Basic Indexing">
        <title>Epic Story Definition</title>
        <snippet>Implement file system monitoring with Watchdog, basic file indexing for multiple languages, incremental indexing, status endpoints, and metadata storage.</snippet>
      </doc>
    </docs>

    <code>
      <file path="src/config/settings.py" kind="configuration" symbol="Settings" lines="56-57">
        <reason>Existing configuration for indexed_paths and ignore_patterns - use these settings for file monitoring</reason>
      </file>
      <file path="src/mcp_server/server.py" kind="fastapi-application" symbol="app" lines="32-38">
        <reason>Existing FastAPI application - add indexing status endpoint here</reason>
      </file>
      <file path="src/mcp_server/server.py" kind="health-endpoint" symbol="health_check" lines="78-115">
        <reason>Existing health check endpoint - extend to include indexing status</reason>
      </file>
      <file path="src/mcp_server/tools/health.py" kind="mcp-tools" symbol="register_health_tools" lines="22-116">
        <reason>MCP tool registration pattern - follow for indexing status tool</reason>
      </file>
      <file path="tests/unit/test_server.py" kind="unit-tests" symbol="test_health_endpoint_structure" lines="51-88">
        <reason>Testing patterns for endpoint structure validation - follow for indexing endpoint tests</reason>
      </file>
      <file path="deployment/docker/docker-compose.yml" kind="infrastructure" symbol="context-server" lines="63-100">
        <reason>Context Server container configuration - file monitor runs in this container</reason>
      </file>
    </code>

    <dependencies>
      <python>
        <package name="watchdog" version=">=3.0.0">File system monitoring library - TO BE ADDED</package>
        <package name="sqlalchemy" version=">=2.0.0">ORM for database operations - TO BE ADDED</package>
        <package name="alembic" version=">=1.12.0">Database migration tool - TO BE ADDED</package>
        <package name="psycopg2-binary" version=">=2.9.0">PostgreSQL adapter - already installed</package>
        <package name="fastapi" version=">=0.104.0">Core web framework - already installed</package>
        <package name="pydantic" version=">=2.0.0">Data validation - already installed</package>
      </python>
      <python-dev>
        <package name="pytest" version=">=7.4.0">Testing framework - already installed</package>
        <package name="pytest-asyncio" version=">=0.21.0">Async testing support - already installed</package>
      </python-dev>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>MUST use Watchdog library for file system monitoring - specified in architecture</constraint>
    <constraint>MUST integrate with existing FastAPI application in src/mcp_server/server.py</constraint>
    <constraint>MUST use Pydantic Settings pattern from src/config/settings.py for configuration</constraint>
    <constraint>MUST follow pytest testing patterns established in tests/unit/test_server.py</constraint>
    <constraint>MUST run in existing Context Server Docker container - no new container required</constraint>
    <constraint>MUST use SQLAlchemy for database operations with PostgreSQL</constraint>
    <constraint>MUST implement incremental indexing - only update changed files (AC #3)</constraint>
    <constraint>MUST achieve 1000+ files/minute indexing throughput (performance target)</constraint>
    <constraint>MUST detect changes in real-time with sub-second latency (AC #1)</constraint>
    <constraint>MUST extend existing /health endpoint to include indexing status (AC #4)</constraint>
    <constraint>Follow 100% local-first architecture - no external API calls or cloud dependencies</constraint>
    <constraint>MUST use existing indexed_paths and ignore_patterns from settings.py</constraint>
  </constraints>

  <interfaces>
    <interface name="File Monitor Service" kind="service">
      <signature>
        class FileMonitor:
            def __init__(self, paths: List[str], ignore_patterns: List[str])
            async def start(self) -> None
            async def stop(self) -> None
            def on_created(self, event: FileSystemEvent) -> None
            def on_modified(self, event: FileSystemEvent) -> None
            def on_deleted(self, event: FileSystemEvent) -> None
      </signature>
      <path>src/indexing/file_monitor.py</path>
      <description>Watchdog-based file system monitoring service with event handlers</description>
    </interface>
    <interface name="File Indexer Service" kind="service">
      <signature>
        class FileIndexer:
            async def index_file(self, file_path: str) -> FileMetadata
            async def detect_file_type(self, file_path: str) -> str
            async def extract_metadata(self, file_path: str) -> dict
            async def process_queue(self) -> None
      </signature>
      <path>src/indexing/file_indexer.py</path>
      <description>File indexing service for processing and extracting metadata</description>
    </interface>
    <interface name="File Metadata Model" kind="database-model">
      <signature>
        class FileMetadata(Base):
            __tablename__ = "file_metadata"
            id: int
            file_path: str
            file_type: str
            size: int
            modified_time: datetime
            indexed_time: datetime
            status: str
      </signature>
      <path>src/indexing/models.py</path>
      <description>SQLAlchemy model for file metadata storage</description>
    </interface>
    <interface name="Indexing Status Endpoint" kind="rest-endpoint">
      <signature>
        @app.get("/indexing/status", response_model=IndexingStatusResponse)
        async def indexing_status() -> IndexingStatusResponse
      </signature>
      <path>src/mcp_server/server.py</path>
      <description>FastAPI endpoint for indexing status and statistics</description>
    </interface>
    <interface name="Indexing MCP Tool" kind="mcp-tool">
      <signature>
        @mcp.tool()
        async def indexing_status() -> Dict[str, Any]:
            """Get indexing status and statistics"""
      </signature>
      <path>src/mcp_server/tools/indexing.py</path>
      <description>MCP tool endpoint for indexing status via Claude Code CLI</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Follow pytest testing patterns established in Story 1.1 and 1.2:
      - Unit tests with pytest and pytest-asyncio for async function testing
      - TestClient from fastapi.testclient for endpoint testing
      - Fixtures for test setup (client fixture, mock_env fixture, temp_dir fixture)
      - Structured test naming: test_<component>_<scenario>
      - Assertions on response structure, status codes, and data validation
      - Mock file system events for file monitor testing
      - Temporary directories for file indexing tests
      - Database fixtures with test database for metadata storage tests
      - Test coverage >80% for critical paths (monitoring, indexing, status endpoints)
    </standards>
    <locations>
      tests/unit/test_file_monitor.py - File monitor event handler unit tests
      tests/unit/test_file_indexer.py - File indexer and type detection unit tests
      tests/unit/test_indexing_models.py - Database model unit tests
      tests/integration/test_indexing_flow.py - End-to-end indexing flow integration tests
      tests/unit/test_server.py - Extend for indexing status endpoint tests
    </locations>
    <ideas>
      <test criterion="1">
        - test_file_monitor_initialization: Verify Watchdog observer starts successfully
        - test_file_created_event: Verify file creation events are detected
        - test_file_modified_event: Verify file modification events are detected
        - test_file_deleted_event: Verify file deletion events are detected
        - test_ignore_patterns: Verify ignored patterns are excluded from monitoring
        - test_real_time_detection: Verify sub-second change detection latency
      </test>
      <test criterion="2">
        - test_detect_python_files: Verify .py files are detected and indexed
        - test_detect_javascript_files: Verify .js, .jsx files are detected
        - test_detect_typescript_files: Verify .ts, .tsx files are detected
        - test_detect_java_files: Verify .java files are detected
        - test_detect_cpp_files: Verify .cpp, .h, .hpp files are detected
        - test_unsupported_file_types: Verify unsupported files are skipped
      </test>
      <test criterion="3">
        - test_incremental_indexing_create: Verify new files are added to index
        - test_incremental_indexing_modify: Verify modified files update existing index
        - test_incremental_indexing_delete: Verify deleted files are removed from index
        - test_no_full_reindex: Verify unchanged files are not reprocessed
        - test_indexing_queue: Verify queue processes changes in order
      </test>
      <test criterion="4">
        - test_indexing_status_endpoint: Verify /indexing/status returns correct structure
        - test_indexing_statistics: Verify total/indexed/pending file counts
        - test_indexing_progress: Verify progress percentage calculation
        - test_last_indexing_time: Verify last indexing timestamp
        - test_mcp_indexing_tool: Verify MCP tool returns indexing status
      </test>
      <test criterion="5">
        - test_file_metadata_storage: Verify metadata is stored in PostgreSQL
        - test_file_path_storage: Verify file paths are stored correctly
        - test_modification_time_storage: Verify modification times are stored
        - test_file_type_storage: Verify file types are stored correctly
        - test_metadata_retrieval: Verify metadata can be queried from database
      </test>
    </ideas>
  </tests>
</story-context>

