version: '3.8'

services:
  # Qdrant Vector Database - Semantic search storage
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: context-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD-SHELL", "timeout 5s bash -c '</dev/tcp/localhost/6333' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - context-network

  # PostgreSQL - Metadata and audit logging
  postgres:
    image: postgres:15-alpine
    container_name: context-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-context_dev}
      POSTGRES_USER: ${POSTGRES_USER:-context}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U context -d context_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - context-network

  # Redis - Caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: context-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - context-network

  # Context Server - Main application (development mode)
  context-server:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.dev
    container_name: context-server
    ports:
      - "8000:8000"
    volumes:
      - ../../src:/app/src
      - ../../tests:/app/tests
      - ../../docs:/app/docs
      - ../../requirements:/app/requirements
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - QDRANT_HOST=${QDRANT_HOST}
      - QDRANT_PORT=${QDRANT_PORT}
      - QDRANT_COLLECTION=${QDRANT_COLLECTION}
      - QDRANT_VECTOR_SIZE=${QDRANT_VECTOR_SIZE}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      - ENVIRONMENT=${ENVIRONMENT}
      - MCP_ENABLED=${MCP_ENABLED}
      - MCP_SERVER_NAME=${MCP_SERVER_NAME}
      - DEBUG=${DEBUG:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - context-network
    command: uvicorn src.mcp_server.server:app --reload --host 0.0.0.0 --port 8000

volumes:
  qdrant_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  context-network:
    driver: bridge
